'''
Created on 02 May 2014

@author: EwoutVE
'''
import TreeController
from Bio.Seq import Seq
from Bio.Alphabet import IUPAC

class ClusterController:
    '''
    classdocs
    '''


    def __init__(self, sqlController, treeController, sequenceController):
        '''
        Constructor
        '''
        self.sqlController = sqlController
        self.treeController = treeController
        self.sequenceController = sequenceController
        
    def countPatients(self, rootNode):
        patients = set()
        for leaf in rootNode.get_leaves():
            patientId, sampleId = self.treeController.leafNameToObjects(leaf.name)
            patients.add(patientId)
        
        return len(patients)
    
    def countTreatedNonTreatedPatients(self, rootNode):
        patients = set()
        for leaf in rootNode.get_leaves():
            patientId, sampleId = self.treeController.leafNameToObjects(leaf.name)
            patients.add(patientId)
        
        return self.sqlController.isTreated(patients)[0][0], len(patients) - self.sqlController.isTreated(patients)[0][0]
    
    def countTreatedPatients(self, rootNode):
        patients = set()
        for leaf in rootNode.get_leaves():
            patientId, sampleId = self.treeController.leafNameToObjects(leaf.name)
            patients.add(patientId)
        
        return self.sqlController.isTreated(patients)[0][0]
    
    def countNonTreatedPatients(self, rootNode):
        patients = set()
        for leaf in rootNode.get_leaves():
            patientId, sampleId = self.treeController.leafNameToObjects(leaf.name)
            patients.add(patientId)
        
        return len(patients) - self.sqlController.isTreated(patients)[0][0]
    
    def getResistanceMutations(self, rootNode):
        referenceSequence = Seq("CCTCAGGTCACTCTTTGGCAACGACCCCTCGTCACAATAAAGATAGGGGGGCAACTAAAG"+
        "GAAGCTCTATTAGATACAGGAGCAGATGATACAGTATTAGAAGAAATGAGTTTGCCAGGA"+
        "AGATGGAAACCAAAAATGATAGGGGGAATTGGAGGTTTTATCAAAGTAAGACAGTATGAT"+
        "CAGATACTCATAGAAATCTGTGGACATAAAGCTATAGGTACAGTATTAGTAGGACCTACA"+
        "CCTGTCAACATAATTGGAAGAAATCTGTTGACTCAGATTGGTTGCACTTTAAATTTTCCC"+
        "ATTAGCCCTATTGAGACTGTACCAGTAAAATTAAAGCCAGGAATGGATGGCCCAAAAGTT"+
        "AAACAATGGCCATTGACAGAAGAAAAAATAAAAGCATTAGTAGAAATTTGTACAGAGATG"+
        "GAAAAGGAAGGGAAAATTTCAAAAATTGGGCCTGAAAATCCATACAATACTCCAGTATTT"+
        "GCCATAAAGAAAAAAGACAGTACTAAATGGAGAAAATTAGTAGATTTCAGAGAACTTAAT"+
        "AAGAGAACTCAAGACTTCTGGGAAGTTCAATTAGGAATACCACATCCCGCAGGGTTAAAA"+
        "AAGAAAAAATCAGTAACAGTACTGGATGTGGGTGATGCATATTTTTCAGTTCCCTTAGAT"+
        "GAAGACTTCAGGAAGTATACTGCATTTACCATACCTAGTATAAACAATGAGACACCAGGG"+
        "ATTAGATATCAGTACAATGTGCTTCCACAGGGATGGAAAGGATCACCAGCAATATTCCAA"+
        "AGTAGCATGACAAAAATCTTAGAGCCTTTTAGAAAACAAAATCCAGACATAGTTATCTAT"+
        "CAATACATGGATGATTTGTATGTAGGATCTGACTTAGAAATAGGGCAGCATAGAACAAAA"+
        "ATAGAGGAGCTGAGACAACATCTGTTGAGGTGGGGACTTACCACACCAGACAAAAAACAT"+
        "CAGAAAGAACCTCCATTCCTTTGGATGGGTTATGAACTCCATCCTGATAAATGGACAGTA"+
        "CAGCCTATAGTGCTGCCAGAAAAAGACAGCTGGACTGTCAATGACATACAGAAGTTAGTG"+
        "GGGAAATTGAATTGGGCAAGTCAGATTTACCCAGGGATTAAAGTAAGGCAATTATGTAAA"+
        "CTCCTTAGAGGAACCAAAGCACTAACAGAAGTAATACCACTAACAGAAGAAGCAGAGCTA"+
        "GAACTGGCAGAAAACAGAGAGATTCTAAAAGAACCAGTACATGGAGTGTATTATGACCCA"+
        "TCAAAAGACTTAATAGCAGAAATACAGAAGCAGGGGCAAGGC", IUPAC.ambiguous_dna)
        
        testSequence = Seq("CCTCAAATCACTCTTTGGCAGCGACCCATAGTCACAGTAAGAATAGGGGGACAGCTAATA"+
        "GAAGCCCTGTTAGACACAGGAGCAGATGATACAGTATTAGAAGATATAAATTTACCAGGA"+
        "AAATGGAAACCGAAAATGATAGGGGGAATTGGTGGTTTAGTCAAAGTAAGACAGTATGAG"+
        "CAAATACCTATAGAAATTTKTGGAAAAAAGGTTATAGGGACAGTATTAGTAGGACCTACA"+
        "CCTGCCAACATAATTGGGAGAAATATAATGACTCAGATTGGTTGTACTTTAAATTTTCCA"+
        "ATTAGTCCTATTGAAACTGTACCAGTAAAATTAAAGCCAGGAATGGATGGTCCAAAGGTT"+
        "AAACAATGGCCATTGACAGAAGAAAAAATAAAAGCATTAACAGAAATTTGTACAGAATTG"+
        "GAAAGGGAAGGAAAAATTTCAAAAATTGGACCTGAAAATCCATACAACACTCCAATATTC"+
        "GCCATAAAGAAGAAAAACAGTACTAGATGGAGAAAATTGGTAGATTTTAGAGAGCTCAAT"+
        "AAAAGAACTCAAGACTTCTGGGAGGTCCAATTAGGAATACCTCATCCCTCGGGGTTAAAA"+
        "AAGAAAAAATCAGTAACAGTGCTAGATGTGGGGGATGCATACTTTTCAGTGCCCTTAGAT"+
        "GAAAGCTTTAGAAAGTATACTGCATTCACTATACCTAGTACAAATAATGAGACACCAGGG"+
        "ATTAGATATCAGTACAATGTGCTTCCACAGGGATGGAAAGGATCACCAGCAATATTTCAA"+
        "AGTAGCATGACAAAAATCTTAGAGCCCTTTAGAAGAAAAAACCCAGAAATAGTGATCTAC"+
        "CAATATGTGGATGATTTATATGTAGGATCTGACTTAGAAATAGGGCAACATAGAGCAAAA"+
        "ATAGAGGAGTTAAGAAAACATCTGTTAAGCTGGGGGTTTTACACACCAGATGAAAAGCAT"+
        "CAGAAAGAACCTCCATTCCTTTGGATGGGATATGAGCTCCATCCTGACAAATGGACAGTA"+
        "CAGCCTATACAGCTACCAGACAAAGAAAGCTGGACTGTCAATGATATACAAAAGTTAGTG"+
        "GGAAAACTAAATTGGGCAAGCCAGATTTATCCAGGGATTAAAGTAAAACAACTATGTAAA"+
        "CTCCTYAGGGGAGCCAAAGCACTAACAGACATAATACCACTAACTGCAGAAGCAGAATTG"+
        "GAATTGGCAGAGAACAGGGAGATTCTGAAAGAACCTGTACATGGAGTCTATTATGACCCA"+
        "TCAAAAGAATTAATAGCAGAAGTACAGAAACAAGGGCCAGAC")
        
        return self.sequenceController.compare(referenceSequence, testSequence)